(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["table"],{5243:function(e,t,a){"use strict";a.r(t);var n=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",[a("a-tabs",{attrs:{type:"card"}},[a("a-tab-pane",{key:"1",attrs:{tab:"YModelTable 表格模板"}},[a("YModelTable")],1),a("a-tab-pane",{key:"2",attrs:{tab:"yTable 表格"}},[a("YTable")],1)],1)],1)},l=[],s=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",[a("title-detail",{attrs:{title:"表格",detail:"基于antd的table组件封装的表格组件，拥有antd所有table组件的API，并在此基础上增添丰富了新的功能，例如表格列宽拖拽、行点击选中、v-model的选中数据绑定等，具体可查看如下API。"}}),a("a",{attrs:{href:"https://www.antdv.com/components/table-cn/"}},[e._v("antd表格组件API")]),a("h3",{staticClass:"fun-title"},[e._v("代码演示")]),a("funTitleDetail",{attrs:{title:"基本用法",detail:""}}),a("com-show",[a("y-table",{attrs:{bordered:"","row-selection":e.rowSelection,components:e.$YGetTableDragHeader(e.columns),columns:e.columns,"data-source":e.data,pagination:e.pagination,modelKeys:e.selectedDataKeys},on:{change:e.handleTableChange,"update:modelKeys":function(t){e.selectedDataKeys=t},"update:model-keys":function(t){e.selectedDataKeys=t}},scopedSlots:e._u([{key:"name",fn:function(t){return a("a",{staticClass:"y-button-link"},[e._v(e._s(t))])}},{key:"tags",fn:function(t){return a("span",{},e._l(t,(function(t){return a("a-tag",{key:t,attrs:{color:"loser"===t?"volcano":t.length>5?"geekblue":"green"}},[e._v(" "+e._s(t.toUpperCase())+" ")])})),1)}}]),model:{value:e.selectedData,callback:function(t){e.selectedData=t},expression:"selectedData"}}),a("p",{staticStyle:{"margin-top":"20px"}},[e._v(" selectedData："+e._s(e.selectedData)),a("br"),e._v(" selectedDataKeys："+e._s(e.selectedDataKeys)+" ")])],1),a("pre",{staticClass:"line-numbers"},[e._v("    "),a("code",{staticClass:"language-html",domProps:{textContent:e._s(e.html)}},[e._v("\n    ")]),e._v("\n    "),a("code",{staticClass:"language-javascript",domProps:{textContent:e._s(e.js)}},[e._v("\n      ")]),e._v("\n    ")]),a("api-table",{attrs:{data:e.tableData01}}),a("api-table",{attrs:{data:e.tableData02,title:"rowSelection选择功能的配置"}}),a("api-table",{attrs:{data:e.tableData3,title:"scroll滚动API"}}),a("api-table",{attrs:{title:"columns列数据数组中对象API",data:e.tableData4}})],1)},o=[],r=a("5530"),i=(a("b0c0"),a("b680"),{data:function(){return{tableData:[{params:"rowSelection",explain:"选择功能的配置，false则隐藏选择，默认为true，对象则看rowSelection选择API",type:"Object | Boolean",default:"true"},{params:"tableHeader",explain:"是否需要表格头部上的左侧操作按钮和右侧搜索等",type:"Boolean",default:"true"},{params:"scroll",explain:"控制表格滚动，具体看scroll滚动API",type:"Object",default:"null"},{params:"affixTarget",explain:"表格吸顶吸底，函数返回滚动目标dom对象即可",type:"Function",default:"null"},{params:"dataSource",explain:"表格数据，用于前端分页，可直接传入所有数据，有了该值， api 则不会再请求",type:"Array",default:"null"},{params:"columns",explain:"列数据，具体查看columns列数据API",type:"Array",default:"[]"},{params:"rowKey",explain:"表格行 key 的取值，可以是字符串或一个函数",type:"String | Function",default:"id"},{params:"buttonList",explain:"将会根据buttonList生成表头左侧的操作按钮和批量操作按钮",type:"Array",default:"null"},{params:"api",explain:"返回promise对象的请求方法，用于常见的后端分页",type:"Function",default:"null"},{params:"immediately",explain:"是否在表格加载完成时就立即请求数据",type:"Boolean",default:"true"},{params:"paramsKeyFilter",explain:"修改请求参数的名称，api的请求参数默认{\n                start: 'start', // 起始页\n                size: 'size', // 分页大小\n                search: 'nameLike', // 搜索框\n                sort: 'sort', // 排序对象\n                order: 'order', // 排序顺序\n              }，（参数值会自动根据组件当前数据传入请求），可通过paramsKeyFilter修改，比如将起始页的 start 改为 begin：{start: 'begin，'}，那之后的请求参数将会是{begin:1,...}",type:"Object",default:"null"},{params:"extraParams",explain:"额外的请求参数，在默认请求参数中添加其它额外的参数（参数值在传入时确定）",type:"Object",default:"null"},{params:"fresh",explain:"是否需要表头右侧的刷新功能",type:"Boolean",default:"true"},{params:"setting",explain:"是否需要表头右侧的设置列",type:"Boolean",default:"true"},{params:"selectOptions",explain:"搜索下拉选项[{title:'标题',value:'值'}]，输入框会根据对应选项title显示到placeholder，若没有选项，默认是第一列title作为搜索对象",type:"Array",default:"null"},{params:"handleResponse",explain:"通过该回调函数的返回，处理请求成功后数据的赋值，参数一是请求返回的值，参数二是赋值类型，目前有两种 total 和 data，分别给总页数和表格数据赋值",type:"Function",default:"null"},{params:"getTableCallback",explain:"后端分页情况下，获取表格数据后的回调函数，形参为{ data: '接口返回数据或报错信息', type: 'success|error' }",type:"Function",default:"null"},{params:"download",explain:"点击导出操作的回调",type:"Function",default:"null"},{params:"filter",explain:"点击高级搜索按钮的回调",type:"Function",default:"null"},{params:"onSearch",explain:"进行搜索的回调",type:"Function",default:"null"}],tableData2:[{params:"columnWidth",explain:"自定义列表选择框宽度，默认的选择列宽为40",type:"string|number",default:"40"},{params:"columnTitle",explain:"自定义列表选择框标题",type:"string|VNode",default:""},{params:"fixed",explain:"把选择框列固定在左边",type:"boolean",default:""},{params:"getCheckboxProps",explain:"选择框的默认属性配置",type:"Function(record)",default:""},{params:"hideDefaultSelections",explain:"去掉『全选』『反选』两个默认选项",type:"boolean",default:"false"},{params:"type",explain:"多选/单选，checkbox or radio",type:"string",default:"checkbox"}],tableData3:[{params:"x",explain:"设置横向滚动，也可用于指定滚动区域的宽和高，可以设置为像素值，百分比，true 和 'max-content'",type:"number | true",default:""},{params:"y",explain:"设置纵向滚动，也可用于指定滚动区域的宽和高，可以设置为像素值，百分比，true 和 'max-content'",type:"number | true",default:""},{params:"scrollToFirstRowOnChange",explain:"当分页、排序、筛选变化后是否滚动到表格顶部",type:"boolean",default:""}],tableData4:[{params:"align",explain:"设置列内容的对齐方式",type:"'left' | 'right' | 'center'",default:"'left'"},{params:"ellipsis",explain:"超过宽度将自动省略，注意：默认只会显示dataIndex对应的值，若没有对应的值，不要用ellipsis默认提示",type:"boolean",default:"false"},{params:"colSpan",explain:"表头列合并,设置为 0 时，不渲染",type:"number",default:""},{params:"dataIndex",explain:"列数据在数据项中对应的 key，必填",type:"string",default:""},{params:"defaultFilteredValue",explain:"默认筛选值",type:"string[]"},{params:"align",explain:"设置列内容的对齐方式",type:"'left' | 'right' | 'center'",default:"'left'"},{params:"filterDropdown",explain:"可以自定义筛选菜单，此函数只负责渲染图层，需要自行编写各种交互",type:"VNode | slot-scope"},{params:"filterDropdownVisible",explain:"用于控制自定义筛选菜单是否可见。",type:"boolean"},{params:"filtered",explain:"标识数据是否经过过滤，筛选图标会高亮",type:"boolean",default:"false"},{params:"filterIcon",explain:"自定义 filter 图标。",type:"VNode | (filtered: boolean, column: Column) => vNode |slot |slot-scope",default:"false"},{params:"filterMultiple",explain:"是否多选",type:"boolean",default:"true"},{params:"filters",explain:"表头的筛选菜单项",type:"object[]"},{params:"fixed",explain:"列是否固定，可选 true(等效于 left) 'left' 'right'",type:"boolean|string",default:"false"},{params:"customRender",explain:"\t生成复杂数据的渲染函数，参数分别为当前行的值，当前行数据，行索引，@return 里面可以设置表格行/列合并",type:"Function(text, record, index) {}|slot-scope"},{params:"sorter",explain:"排序函数，本地排序使用一个函数(参考 Array.sort 的 compareFunction)，服务端排序可设为 true",type:"Function|boolean",default:"false"},{params:"sortDirections",explain:"支持的排序方式，取值为 'ascend' 'descend'",type:"Array",default:"['ascend', 'descend']"},{params:"title",explain:"列头显示文字",type:"\tstring|slot\t"},{params:"width",explain:"列宽度",type:"string|number",default:"false"},{params:"onFilter",explain:"本地模式下，确定筛选的运行函数, 使用 template 或 jsx 时作为filter事件使用",type:"Function"},{params:"slots",explain:"使用 columns 时，可以通过该属性配置支持 slot 的属性，如 slots: { filterIcon: 'XXX'}",type:"object",default:"false"},{params:"scopedSlots",explain:"使用 columns 时，可以通过该属性配置支持 slot-scope 的属性，如 scopedSlots: { customRender: 'XXX'}",type:"object"}],tableData5:[{params:"text",explain:"按钮文字",type:"String",default:""},{params:"copy",explain:"是否需要复制",type:"Boolean",default:"false"},{params:"click",explain:"按钮点击事件",type:"Function",default:""},{params:"disabled",explain:"按钮是否禁用，按钮默认选择数据才可点击，不选数据则被禁用",type:"Boolean",default:"false"},{params:"show",explain:"按钮的显示隐藏",type:"Boolean",default:"true"},{params:"tips",explain:"\t提示信息，若为字符串，则默认显示top位置；若为对象可根据对象中的placement（可选 top left right bottom topLeft topRight bottomLeft bottomRight leftTop leftBottom rightTop rightBottom）属性修改位置，text属性为字符串",type:"String|Object",default:""},{params:"icon",explain:"图标",type:"String",default:""},{params:"type",explain:"按钮类型，primary 类型默认不需选择数据，也不会被禁用",type:"可选值为 primary dashed danger link 或者不设",default:""},{params:"checkDisabled",explain:"此值将按钮与数据选中绑定，除了primary按钮默认一直可点，其它未设置disabled的按钮都是默认根据选中数据判断是否禁用；若想要primary按钮可根据是否选择数据禁用，则checkDisabled为true；若想要一般按钮不根据是否选择数据来判断禁用（即一直是可点的），则checkDisabled为false解除与数据选择的绑定",type:"Boolean",default:""}],tableData6:[{params:"clearSelect",explain:"清空表格所选数据",type:"function",default:""},{params:"onSearch",explain:"可传参执行搜索，并重置页数回到第一页",type:"function(string)",default:""},{params:"getTableData",explain:"执行搜索但不会重置页数回到第一页",type:"function",default:""},{params:"freshTable",explain:"进行清空输入框、表格过滤、表格排序并重置回到第一页的搜索",type:"function",default:""}]}}}),d=[{title:"标题",dataIndex:"name",key:"name",scopedSlots:{customRender:"name"},width:200,filters:[{text:"Joe",value:"Joe"},{text:"Jim",value:"Jim"}],onFilter:function(e,t){return 0===t.name.indexOf(e)},sorter:function(e,t){return e.name.length-t.name.length}},{title:"Address",dataIndex:"address",key:"address",ellipsis:!0,width:200},{title:"Tags",key:"tags",dataIndex:"tags",scopedSlots:{customRender:"tags"},width:200}],p=[{key:"d1",name:"内容文本，点击可进入详情1",age:32,address:"New York No. 1 Lake Park  New York NoNew York NoNew York NoNew York NoNew York NoNew York NoNew York No",tags:["nice","developer"]},{key:"d2",name:"内容文本，点击可进入详情12",age:42,address:"London No. 1 Lake Park",tags:["loser"]},{key:"d3",name:"内容文本，点击可进入详情123",age:32,address:"Sidney No. 1 Lake Park",tags:["cool","teacher"]}],c={name:"tableviews",mixins:[i],data:function(){return{html:'<template>\n        <y-table\n          v-model="selectedData"\n          bordered\n          @change="handleTableChange"\n          :row-selection="rowSelection"\n          :components="$YGetTableDragHeader(columns)"\n          :columns="columns"\n          :data-source="data"\n          :pagination="pagination"\n          :modelKeys.sync="selectedDataKeys"\n        >\n          <a slot="name" slot-scope="text" class="y-button-link">{{ text }}</a>\n          <span slot="tags" slot-scope="tags">\n            <a-tag v-for="tag in tags" :key="tag" :color="tag === \'loser\' ? \'volcano\' : tag.length > 5 ? \'geekblue\' : \'green\'">\n              {{ tag.toUpperCase() }}\n            </a-tag>\n          </span>\n        </y-table>\n      </template>',js:"\n        const columns = [\n          {\n            title: '标题',\n            dataIndex: 'name',\n            key: 'name',\n            scopedSlots: { customRender: 'name' },\n            width: 200,\n            filters: [\n              {\n                text: 'Joe',\n                value: 'Joe',\n              },\n              {\n                text: 'Jim',\n                value: 'Jim',\n              },\n            ],\n            onFilter: (value, record) => record.name.indexOf(value) === 0,\n            sorter: (a, b) => a.name.length - b.name.length,\n          },\n          {\n            title: 'Address',\n            dataIndex: 'address',\n            key: 'address',\n            ellipsis: true,\n            width: 200,\n          },\n          {\n            title: 'Tags',\n            key: 'tags',\n            dataIndex: 'tags',\n            scopedSlots: { customRender: 'tags' },\n            width: 200,\n          },\n        ];\n        const data = [\n          {\n            key: 'd1',\n            name: '内容文本，点击可进入详情1',\n            age: 32,\n            address: 'New York No. 1 Lake Park  New York NoNew York NoNew York NoNew York NoNew York NoNew York NoNew York No',\n            tags: ['nice', 'developer'],\n          },\n          {\n            key: 'd2',\n            name: '内容文本，点击可进入详情12',\n            age: 42,\n            address: 'London No. 1 Lake Park',\n            tags: ['loser'],\n          },\n          {\n            key: 'd3',\n            name: '内容文本，点击可进入详情123',\n            age: 32,\n            address: 'Sidney No. 1 Lake Park',\n            tags: ['cool', 'teacher'],\n          },\n        ];\n        export default {\n          name: 'tableviews',\n          data() {\n            return {\n              selectedData: [],\n              selectedDataKeys: [],\n              columns,\n              pagination: this.$YGetTablePagination(),\n            };\n          },\n          computed: {\n            data() {\n              let arr = [];\n              for (let i = 0; i < 500; i++) {\n                let obj = { ...data[((Math.random() * 100).toFixed(0) - 0) % 2] };\n                obj.key = obj.key + i;\n                arr.push(obj);\n              }\n              return arr;\n            },\n            rowSelection() {\n              return {\n                columnWidth: 40,\n                // type: 'radio',\n                // getCheckboxProps: () => {\n                //   return {\n                //     props: {\n                //       disabled: true,\n                //     },\n                //   };\n                // },\n                selectedRowKeys: this.selectedDataKeys, // 控制选择\n              };\n            },\n          },\n          methods: {\n            handleTableChange(pagination) {\n              this.pagination = pagination;\n            },\n          },\n        };",selectedData:[],selectedDataKeys:[],columns:d,pagination:this.$YGetTablePagination(),tableData01:[{params:"components",explain:"components 是 antd 就有的 API，为了支持表格的拖拽需要对 components 进行设置，所以封装了一个全局的 $YGetTableDragHeader 方法，只需传入 columns 参数，就会返回支持拖拽的对象，将其赋值给 components 就可支持表格拖拽功能；至于将来想要修改 component 参数，可以在继承该对象的基础上进行修改即可。注意：只有带有 width 且 width 为数字的 columns 列才支持拖拽",type:"Object"},{params:"v-model",explain:"绑定表格选中的数据，不需要每个表格组件写选择事件",type:"Array",default:"可不传，但建议绑定"},{params:"modelKeys",explain:"绑定表格选中的数据key，必须以 modelKeys.sync 的方式绑定",type:"Array",default:"可不传，但表格作为受控组件的时候必须要传"},{params:"rowClick",explain:"控制表格的行是否支持点击选中，使用该属性时必须得要绑定 modelKeys 和使用rowSelection的selectedRowKeys，使表格成为受控组件。",type:"Boolean",default:"true"},{params:"bordered",explain:"是否展示外边框和列边框",type:"boolean",default:"false"},{params:"columns",explain:"表格列的配置描述，具体见下表",type:"array",default:"-"},{params:"dataSource",explain:"数据数组",type:"any[]",default:""},{params:"loading",explain:"页面是否加载中",type:"boolean",default:"false"},{params:"pagination",explain:"分页器，一般通过$YGetTablePagination去规范统一分页器的格式，或直接设为 false 时不展示和进行分页",type:"boolean",default:"false"},{params:"rowClassName",explain:"表格行的类名",type:"Function(record, index):string",default:"-"},{params:"rowKey",explain:"表格行 key 的取值，可以是字符串或一个函数",type:"string|Function(record):string",default:"key"},{params:"rowSelection",explain:"列表项是否可选择",type:"object",default:"null"},{params:"scroll",explain:"设置横向或纵向滚动，也可用于指定滚动区域的宽和高，建议为 x 设置一个数字，如果要设置为 true，需要配合样式 .ant-table td { white-space: nowrap; }",type:"{ x: number | true, y: number }",default:"-"},{params:"showHeader",explain:"是否显示表头",type:"boolean",default:"true"},{params:"size",explain:"表格大小",type:"default | middle | small",default:"default"}],tableData02:[{params:"columnWidth",explain:"自定义列表选择框宽度",type:"string|number",default:"-"},{params:"columnTitle",explain:"自定义列表选择框标题",type:"string|VNode",default:"-"},{params:"fixed",explain:"把选择框列固定在左边",type:"boolean",default:"-"},{params:"getCheckboxProps",explain:"选择框的默认属性配置",type:"Function(record)",default:"-"},{params:"hideDefaultSelections",explain:"去掉『全选』『反选』两个默认选项",type:"\tboolean",default:"false"},{params:"selectedRowKeys",explain:"指定选中项的 key 数组，可使表格成为受控组件，使用该值的时候，建议和 modelKeys.sync 绑定同一个变量，js 修改该变量，即可修改表格的选中状态",type:"string[]",default:"[]"},{params:"selections",explain:"自定义选择配置项, 设为 true 时使用默认选择项",type:"\tobject[]|boolean",default:"-"},{params:"type",explain:"多选/单选，checkbox or radio",type:"string",default:"checkbox"},{params:"onChange",explain:"选中项发生变化时的回调",type:"\tFunction(selectedRowKeys, selectedRows)",default:"-"},{params:"onSelect",explain:"用户手动选择/取消选择某列的回调",type:"Function(record, selected, selectedRows, nativeEvent)",default:"-"},{params:"onSelectAll",explain:"用户手动选择/取消选择所有列的回调",type:"Function(selected, selectedRows, changeRows)",default:"-"},{params:"onSelectInvert",explain:"用户手动选择反选的回调",type:"\tFunction(selectedRows)",default:"-"}]}},computed:{data:function(){for(var e=[],t=0;t<500;t++){var a=Object(r["a"])({},p[((100*Math.random()).toFixed(0)-0)%2]);a.key=a.key+t,e.push(a)}return e},rowSelection:function(){return{columnWidth:40,selectedRowKeys:this.selectedDataKeys}}},methods:{handleTableChange:function(e){this.pagination=e}}},u=c,m=a("2877"),f=Object(m["a"])(u,s,o,!1,null,null,null),b=f.exports,y=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",[a("title-detail",{attrs:{title:"表格模板",detail:"基于YTable封装的常用表格模板modelTable"}}),a("BETable"),a("FETable"),a("api-table",{attrs:{data:e.tableData,title:"modelTable表格API"}}),a("api-table",{attrs:{data:e.tableData2,title:"rowSelection选择功能的配置"}}),a("api-table",{attrs:{data:e.tableData3,title:"scroll滚动API"}}),a("api-table",{attrs:{data:e.tableData4,title:"columns列数据数组中对象API"}}),a("api-table",{attrs:{data:e.tableData5,title:"buttonList数组中对象API"}}),a("api-table",{attrs:{data:e.tableData6,title:"modelTable表格实例提供的方法"}})],1)},x=[],g=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",[a("h3",{staticClass:"fun-title"},[e._v("代码演示")]),a("funTitleDetail",{attrs:{title:"基础表格（后端分页）",detail:"常见的基础表格"}}),a("com-show",[a("y-model-table",{attrs:{affixTarget:e.affixTarget,selectOptions:e.selectOptions,api:e.getTableData,columns:e.columns,buttonList:e.buttonList,handleResponse:e.handleResponse},scopedSlots:e._u([{key:"name",fn:function(t){var n=t.text;return[a("a",{staticClass:"y-button-link"},[e._v(e._s(n))])]}},{key:"createLoginName",fn:function(t){var n=t.record;return n.createLoginName?a("y-tag",{attrs:{color:"green"}},[e._v(" "+e._s(n.createLoginName)+" ")]):e._e()}}],null,!0)},[a("span",{attrs:{slot:"customTitle"},slot:"customTitle"},[a("a-icon",{attrs:{type:"smile-o"}}),e._v(" 标题")],1)])],1),a("pre",{staticClass:"line-numbers"},[e._v("      "),a("code",{staticClass:"language-html",domProps:{textContent:e._s(e.html)}},[e._v("\n      ")]),e._v("\n      \n  ")]),a("pre",{staticClass:"line-numbers"},[e._v("  "),a("code",{staticClass:"language-javascript",domProps:{textContent:e._s(e.js)}},[e._v("\n      ")]),e._v("\n   ")])],1)},h=[],k=a("24f1"),v="const columns = [\n    {\n      dataIndex: 'name',\n      slots: { title: 'customTitle' },\n      scopedSlots: { customRender: 'name' },\n      width: 200,\n      filters: [\n        {\n          text: '虚拟机',\n          value: '虚拟机',\n        },\n        {\n          text: '登录',\n          value: '登录',\n        },\n      ],\n      filter: true,\n      sorter: true,\n      copy: true,\n    },\n    {\n      title: '任务创建人',\n      dataIndex: 'createLoginName',\n      scopedSlots: { customRender: 'createLoginName' },\n      sorter: true,\n      width: 200,\n    },\n    {\n      title: '任务描述',\n      dataIndex: 'description',\n      width: 200,\n      ellipsis: true,\n      copy: true,\n    },\n    {\n      title: '标签',\n      dataIndex: 'stepDesc',\n\n      width: 200,\n      ellipsis: true,\n    },\n  ];\n  const buttonList = [\n    {\n      text: '新增',\n      tips: '数据添加',\n      type: 'primary',\n      icon: 'plus',\n      click: () => {\n        alert('新增');\n      },\n    },\n    {\n      text: '修改',\n      disable: true,\n    },\n    {\n      text: '复制',\n      click: () => {\n        alert('新增');\n      },\n    },\n    {\n      text: '粘贴操作操作操作',\n      click: () => {\n        alert('新增');\n      },\n    },\n    {\n      text: '删除',\n      tips: '危险操作',\n      disable: true,\n    },\n  ];\n  export default {\n    data() {\n      return {\n        affixTarget: () => document.querySelector('.ant-layout-content'),\n        columns,\n        getTableData: api.getTableData,\n        buttonList,\n        selectOptions: [\n          { title: '标题', value: 'name' },\n          { title: '任务描述', value: 'description' },\n        ]\n      };\n    },\n    methods: {\n      handleResponse(res, type) {\n        if (type === 'total') {\n          return res.data.total;\n        }\n        if (type === 'data') {\n          return res.data.data;\n        }\n      },\n    },\n  };",w=[{dataIndex:"name",slots:{title:"customTitle"},scopedSlots:{customRender:"name"},width:200,filters:[{text:"虚拟机",value:"虚拟机"},{text:"登录",value:"登录"}],filter:!0,sorter:!0,ellipsis:!0,copy:!0},{title:"任务创建人",dataIndex:"createLoginName",scopedSlots:{customRender:"createLoginName"},sorter:!0,width:200},{title:"任务描述",dataIndex:"description",width:200,ellipsis:!0,copy:!0},{title:"标签",dataIndex:"stepDesc",width:200,ellipsis:!0}],D=[{text:"新增",tips:"数据添加",type:"primary",icon:"plus",click:function(){alert("新增")}},{text:"修改"},{text:"复制",checkDisabled:!1,click:function(){alert("复制")}},{text:"粘贴操作操作操作",click:function(){alert("粘贴操作操作操作")}},{text:"删除",tips:"危险操作",disable:!0}],T={name:"BETable",data:function(){return{js:v,affixTarget:function(){return document.querySelector(".ant-layout-content")},columns:w,getTableData:k["a"].getTableData,buttonList:D,selectOptions:[{title:"标题",value:"name"},{title:"任务描述",value:"description"}],declareList:["一般出现在通知图标或头像的右上角，用于显示需要处理的消息条数，通过醒目视觉形式吸引用户关注和处理","作为一个链接，快速查看详情的入口","代表事件的状态，让用户提前知道事件的进展情况"],html:'<y-model-table\n        :affixTarget="affixTarget"\n        :selectOptions="selectOptions"\n        :api="getTableData"\n        :columns="columns"\n        :buttonList="buttonList"\n        :handleResponse="handleResponse"\n      >\n        <template v-slot:name="{ text }">\n          <a class="y-button-link">{{ text }}</a>\n        </template>\n        <span slot="customTitle"><a-icon type="smile-o" /> 标题</span>\n        <y-tag slot="createLoginName" v-if="record.createLoginName" slot-scope="{ record }" :color="\'green\'">\n          {{ record.createLoginName }}\n        </y-tag>\n      </y-model-table>'}},methods:{handleResponse:function(e,t){return"total"===t?e.data.total:"data"===t?e.data.data:void 0}}},N=T,_=Object(m["a"])(N,g,h,!1,null,"a20b915c",null),S=_.exports,L=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",[a("h3",{staticClass:"fun-title"},[e._v("代码演示")]),a("funTitleDetail",{attrs:{title:"基础表格（前端分页）",detail:"常见的基础表格"}}),a("com-show",[a("y-model-table",{attrs:{rowSelection:!1,scroll:{x:!0},dataSource:e.tableData,columns:e.columns},scopedSlots:e._u([{key:"name",fn:function(t){var n=t.text;return[a("a",{staticClass:"y-button-link"},[e._v(e._s(n))])]}},{key:"createLoginName",fn:function(t){var n=t.record;return n.createLoginName?a("a-tag",{attrs:{color:"green"}},[e._v(" "+e._s(n.createLoginName)+" ")]):e._e()}}],null,!0)},[a("template",{slot:"action"},[a("y-table-action-button",{attrs:{buttonList:e.buttonList}})],1)],2)],1),a("pre",{staticClass:"line-numbers"},[e._v("      "),a("code",{staticClass:"language-html",domProps:{textContent:e._s(e.html)}},[e._v("\n      ")]),e._v("\n  ")]),a("pre",{staticClass:"line-numbers"},[e._v("  "),a("code",{staticClass:"language-javascript",domProps:{textContent:e._s(e.js)}},[e._v("\n      ")]),e._v("\n   ")])],1)},I=[],C=(a("caad"),a("2532"),"import api from '@/api';\n  const columns = [\n    {\n      title: '标题',\n      dataIndex: 'name',\n      scopedSlots: { customRender: 'name' },\n      width: 300,\n      fixed: 'left',\n      filters: [\n        {\n          text: '虚拟机',\n          value: '虚拟机',\n        },\n        {\n          text: '登录',\n          value: '登录',\n        },\n      ],\n      onFilter: (value, record) => record.name.includes(value),\n      sorter: (a, b) => a.name.length - b.name.length,\n    },\n    {\n      title: '任务创建人',\n      dataIndex: 'createLoginName',\n      scopedSlots: { customRender: 'createLoginName' },\n      width: 200,\n    },\n    {\n      title: '任务描述',\n      dataIndex: 'description',\n    },\n    {\n      title: '标签',\n      dataIndex: 'stepDesc',\n      width: 200,\n      ellipsis: true,\n    },\n    {\n      title: '操作',\n      dataIndex: 'action',\n      scopedSlots: { customRender: 'action' },\n      width: 180,\n      fixed: 'right',\n    },\n  ];\n\n  const buttonList = [\n    {\n      text: '新增',\n      tips: {\n        text: '数据添加',\n        placement: 'left',\n      },\n      type: 'primary',\n      icon: 'plus',\n    },\n    {\n      text: '修改',\n      disable: true,\n    },\n    {\n      text: '复制',\n    },\n    {\n      text: '粘贴操作操作操作',\n    },\n    {\n      text: '删除',\n      tips: '危险操作',\n      disable: true,\n    },\n  ];\n  export default {\n    data() {\n      return {\n        columns,\n        tableData: [],\n        buttonList\n      };\n    },\n    mounted() {\n      this.getTableData();\n    },\n    methods: {\n      getTableData() {\n        api.getTableData({}).then(res => {\n          this.tableData = res.data.data;\n        });\n      },\n    },\n  };"),R=[{title:"标题",dataIndex:"name",scopedSlots:{customRender:"name"},width:300,fixed:"left",filters:[{text:"虚拟机",value:"虚拟机"},{text:"登录",value:"登录"}],onFilter:function(e,t){return t.name.includes(e)},sorter:function(e,t){return e.name.length-t.name.length}},{title:"任务创建人",dataIndex:"createLoginName",scopedSlots:{customRender:"createLoginName"},width:200},{title:"任务描述",dataIndex:"description",ellipsis:!0},{title:"标签",dataIndex:"stepDesc",width:200,ellipsis:!0},{title:"操作",dataIndex:"action",scopedSlots:{customRender:"action"},width:180,fixed:"right"}],F=[{text:"新增",tips:{text:"数据添加",placement:"left"},type:"primary",icon:"plus"},{text:"修改",disable:!0},{text:"复制"},{text:"粘贴操作操作操作"},{text:"删除",tips:"危险操作",disable:!0}],j={name:"FETable",data:function(){return{js:C,columns:R,tableData:[],buttonList:F,html:'<y-model-table :rowSelection="false" :scroll="{ x: true }" :dataSource="tableData" :columns="columns">\n        <template v-slot:name="{ text }">\n          <a class="y-button-link">{{ text }}</a>\n        </template>\n        <a-tag slot="createLoginName" v-if="record.createLoginName" slot-scope="{ record }" :color="\'green\'">\n          {{ record.createLoginName }}\n        </a-tag>\n        <template slot="action">\n          <y-table-action-button :buttonList="buttonList"></y-table-action-button>\n        </template>\n      </y-model-table>'}},mounted:function(){this.getTableData()},methods:{getTableData:function(){var e=this;k["a"].getTableData({}).then((function(t){e.tableData=t.data.data}))}}},P=j,Y=Object(m["a"])(P,L,I,!1,null,"059b6803",null),K=Y.exports,A={name:"ModelTable",components:{BETable:S,FETable:K},mixins:[i]},O=A,B=Object(m["a"])(O,y,x,!1,null,null,null),E=B.exports,$={name:"myTable",components:{YTable:b,YModelTable:E}},J=$,M=Object(m["a"])(J,n,l,!1,null,null,null);t["default"]=M.exports}}]);
//# sourceMappingURL=table.8e999189.js.map