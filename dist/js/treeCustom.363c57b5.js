(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["treeCustom"],{6028:function(e,t,n){"use strict";n.r(t);var a=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("title-detail",{attrs:{title:"带图标Tree 树形控件",detail:"体现父子层级关系的信息组织方式。"}}),n("h3",{staticClass:"fun-title"},[e._v("代码演示")]),n("declareList",{attrs:{title:"通用原则",value:e.declareList}}),n("y-tabs",{attrs:{"default-active-key":"1"}},[n("y-tab-pane",{key:"1",attrs:{tab:"基本用法"}},[n("tree1")],1),n("y-tab-pane",{key:"2",attrs:{tab:"带图标、提示框、操作栏、异步加载用法"}},[n("tree2")],1),n("y-tab-pane",{key:"3",attrs:{tab:"树节点拖拽用法"}},[n("tree3")],1),n("y-tab-pane",{key:"4",attrs:{tab:"严格关系"}},[n("tree4")],1),n("y-tab-pane",{key:"5",attrs:{tab:"不带图标右键操作"}},[n("tree5")],1)],1),n("api-table",{attrs:{data:e.tableData}}),n("api-table",{attrs:{title:"事件",data:e.tableData2}}),n("api-table",{attrs:{title:"TreeNode props",detail:"结点描述数据对象，是 treeNodes 中的一项，TreeNode 使用相同的 API。",data:e.tableData3}}),n("api-table",{attrs:{title:"DirectoryTree props",data:e.tableData4}}),n("api-table",{attrs:{title:"treeData相关参数说明",data:e.tableData5}})],1)},l=[],s=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("funTitleDetail",{attrs:{title:"基本用法",detail:"最简单的用法，禁用，默认展开等功能。"}}),n("div",{staticStyle:{width:"300px"}},[n("y-custom-tree",{attrs:{replaceFields:e.replaceFields,"default-expanded-keys":["0-0","0-0-0"],treeData:e.treeData,showTooltip:!1},on:{select:e.onSelect}})],1),n("pre",{staticClass:"line-numbers"},[e._v("      "),n("code",{staticClass:"language-html",domProps:{textContent:e._s(e.html)}},[e._v("\n      ")]),e._v("\n      "),n("code",{staticClass:"language-JavaScript",domProps:{textContent:e._s(e.js)}},[e._v("\n      ")]),e._v("\n  ")])],1)},o=[],i={name:"myTree1",data:function(){return{replaceFields:{title:"name"},treeData:[{name:"parent",key:"0-0",class:"no-style",children:[{name:"parent 1-0 ",key:"0-0-0",disabled:!0,children:[{name:"leaf",key:"0-0-0-0",disableCheckbox:!0},{name:"leaf123",key:"0-0-0-1"}]},{name:"parent 1-1  12222222222222222222222222222222222222222",key:"0-0-1",children:[{key:"0-0-1-0",name:"leaf1235"}]}]}],html:'<div style="width:300px">\n      \x3c!-- 组件展示 --\x3e\n      <y-custom-tree :default-expanded-keys="[\'0-0\', \'0-0-0\']" @select="onSelect" :treeData="treeData" :showTooltip="false"> </y-custom-tree>\n      </div>',js:"\n      export default {\n        name: 'myTree1',\n        data() {\n          return {\n            treeData: [\n              {\n                title: 'parent 1',\n                class: 'no-style', // 添加此类名，标题不会有任何样式\n                key: '0-0',\n                children: [\n                  {\n                    title: 'parent 1-0',\n                    key: '0-0-0',\n                    disabled: true,\n                    children: [\n                      { title: 'leaf', key: '0-0-0-0', disableCheckbox: true },\n                      { title: 'leaf123', key: '0-0-0-1' },\n                    ],\n                  },\n                  {\n                    title: 'parent 1-1',\n                    key: '0-0-1',\n                    children: [{ key: '0-0-1-0', title: 'leaf1235' }],\n                  },\n                ],\n              },\n            ],\n          };\n        },\n      };\n    "}},methods:{onSelect:function(e,t){console.log("selected",e,t)}}},r=i,d=n("2877"),c=Object(d["a"])(r,s,o,!1,null,null,null),p=c.exports,u=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("funTitleDetail",{attrs:{title:"带图标、提示框、操作栏、异步加载用法",detail:"通过slot插槽方式,slot名字与数据源节点的slots: { icon: 'smile' },icon里的值一致则渲染对应图标内容。"}}),n("div",{staticStyle:{width:"300px"}},[n("h3",{staticClass:"fun-title"},[e._v("大尺寸")]),n("p",[e._v("check模式")]),n("y-custom-tree",{attrs:{checkable:"",nodeHeightSize:"s","default-expanded-keys":["0-0","0-0-0"],treeData:e.treeData,operates:e.commonOperates,"load-data":e.onLoadData},on:{select:e.handleSelect},model:{value:e.aa,callback:function(t){e.aa=t},expression:"aa"}},[n("template",{slot:"smile"},[n("y-svg-icon",{staticStyle:{width:"16px",height:"16px"},attrs:{"icon-class":"eyes_visible"}})],1),n("a-icon",{staticStyle:{width:"16px",height:"16px"},attrs:{slot:"user",type:"user"},slot:"user"})],2),n("p",[e._v("普通模式")]),n("y-custom-tree",{attrs:{"default-expanded-keys":["0-0","0-0-0"],treeData:e.treeData,operates:e.commonOperates},on:{select:e.handleSelect}},[n("a-icon",{staticStyle:{width:"16px",height:"16px"},attrs:{slot:"smile",type:"smile"},slot:"smile"}),n("a-icon",{staticStyle:{width:"16px",height:"16px"},attrs:{slot:"user",type:"user"},slot:"user"})],1),n("h3",{staticClass:"fun-title"},[e._v("小尺寸")]),n("y-custom-tree",{attrs:{"default-expanded-keys":["0-0","0-0-0"],treeData:e.treeData2,operates:e.commonOperates,"load-data":e.onLoadData,operateTriggerMethod:["hover"],operatePlacement:"topRight",showTooltip:!1}},[n("a-icon",{staticStyle:{width:"16px",height:"16px"},attrs:{slot:"smile",type:"smile"},slot:"smile"}),n("a-icon",{staticStyle:{width:"16px",height:"16px"},attrs:{slot:"user",type:"user"},slot:"user"})],1)],1),n("pre",{staticClass:"line-numbers"},[e._v("      "),n("code",{staticClass:"language-html",domProps:{textContent:e._s(e.html)}},[e._v("\n      ")]),e._v("\n      "),n("code",{staticClass:"language-JavaScript",domProps:{textContent:e._s(e.js)}},[e._v("\n      ")]),e._v("\n  ")])],1)},m=[],h=(n("d3b7"),{name:"myTree2",data:function(){var e=this;return{aa:["0-0-0"],html:'\n      <div style="width:300px">\n      \x3c!-- 组件展示 --\x3e\n       <h3 class="fun-title">大尺寸</h3>\n       <y-custom-tree\n          checkable\n          v-model="aa"\n           nodeHeightSize="s"\n          @select="handleSelect"\n          :default-expanded-keys="[\'0-0\', \'0-0-0\']"\n          :treeData="treeData"\n          :operates="commonOperates"\n          :load-data="onLoadData"\n        >\n        <a-icon slot="smile" type="smile" />\n        <a-icon slot="user" type="user" />\n      </y-custom-tree>\n      <y-custom-tree\n        @select="handleSelect"\n        :default-expanded-keys="[\'0-0\', \'0-0-0\']"\n        :treeData="treeData"\n        :operates="commonOperates"\n        :load-data="onLoadData"\n      >\n        <template slot="smile">\n          <y-svg-icon icon-class="eyes_visible" style="width:14px;height:14px" />\n        </template>\n        <a-icon slot="user" type="user" />\n      </y-custom-tree>\n      <h3 class="fun-title">小尺寸</h3>\n      <y-custom-tree\n        @select="handleSelect"\n        :default-expanded-keys="[\'0-0\', \'0-0-0\']"\n        :treeData="treeData"\n        :operates="commonOperates"\n        :load-data="onLoadData"\n        :operateTriggerMethod="[\'hover\']"\n        operatePlacement="topRight"\n        :showTooltip="false"\n        nodeHeightSize="m"\n      >\n        <a-icon slot="smile" type="smile" />\n        <a-icon slot="user" type="user" />\n      </y-custom-tree>\n      </div>',js:"\n       export default {\n        name: 'MyCustomTree',\n        data() {\n          return {\n            aa: ['0-0-0'],\n            commonOperates: [\n              {\n                title: '全局方法1',\n                click: i => {\n                  // console.log(i, '点击了创建');\n                  this.handleCreat(i);\n                },\n              },\n              {\n                title: '全局方法2',\n                click: i => {\n                  this.handleDelete(i);\n                  // console.log(i, '点击了删除');\n                },\n              },\n            ],\n            treeData: [\n              {\n                title: '默认组织111166666666666666666666666666666666666',\n                key: '0-0',\n                isLeaf: false,\n                slots: { icon: 'smile' },\n                scopedSlots: { title: 'dropdown' },\n                operates: [\n                  {\n                    title: '创建',\n                    click: i => {\n                      // console.log(i, '点击了创建');\n                      this.handleCreat(i);\n                    },\n                  },\n                  {\n                    title: '删除',\n                    click: i => {\n                      this.handleDelete(i);\n                      // console.log(i, '点击了创建');\n                    },\n                  },\n                ],\n                children: [\n                  {\n                    title: '研发中心大树底',\n                    key: '0-0-0',\n                    isLeaf: true,\n                    slots: { icon: 'user' },\n                    scopedSlots: { title: 'dropdown' },\n                    operates: [\n                      {\n                        title: '创建子节点2',\n                        click: i => {\n                          // console.log(i, '点击了创建');\n                          this.handleCreat(i);\n                        },\n                      },\n                      {\n                        title: '删除子节点2',\n                        click: i => {\n                          this.handleDelete(i);\n                          // console.log(i, '点击了创建');\n                        },\n                      },\n                    ],\n                  },\n                  { title: '测试部', key: '0-0-1', isLeaf: false, slots: { icon: 'user' }, scopedSlots: { title: 'dropdown' } },\n                ],\n              },\n            ],\n          };\n        },\n        methods: {\n          handleSelect(selectedKeys, info) {\n            console.log(selectedKeys, info, '选择了树节点');\n          },\n          //点击删除创建可以获取对应的节点信息\n          handleDelete(i) {\n            console.log('点击了删除', i);\n          },\n          handleCreat(i) {\n            console.log('点击了创建', i);\n          },\n          //异步加载的时候需要添加 isLeaf属性  isLeaf为true则代表为最后一层无法继续展开 isLeaf为false则代表是还可以继续展开\n          //如果是异步数据加这个方法进行加载\n          onLoadData(treeNode) {\n            return new Promise(resolve => {\n              if (treeNode.dataRef.children) {\n                resolve();\n                return;\n              }\n              //这里发异步请求 把setTimeout改成api请求 把请求回来的数据赋值给treeNode.dataRef.children\n              setTimeout(() => {\n                let asyncArray = [\n                  {\n                    title: '测试部1231',\n                    key: new Date().getTime(),\n                    // isLeaf: true,\n                    slots: { icon: 'smile' },\n                    scopedSlots: { title: 'dropdown' },\n                  },\n                ];\n                this.$set(treeNode.dataRef, 'children', asyncArray);\n                resolve();\n              }, 5000);\n            });\n          },\n        },\n      };\n      ",commonOperates:[{title:"全局方法1",click:function(t){e.handleCreat(t)}},{title:"全局方法2",click:function(t){e.handleDelete(t)}}],treeData:[{title:"默认组织1111666888888888888",key:"0-0",isLeaf:!1,disabled:!0,slots:{icon:"smile"},scopedSlots:{title:"dropdown"},operates:[{title:"创建",click:function(t){e.handleCreat(t)}},{title:"删除",click:function(t){e.handleDelete(t)}}],children:[{title:"研发中心大树底1111111111111111111111111111111",key:"0-0-0",isLeaf:!0,slots:{icon:"user"},scopedSlots:{title:"dropdown"},operates:[{title:"创建子节点2",click:function(t){e.handleCreat(t)}},{title:"删除子节点2",click:function(t){e.handleDelete(t)}}]},{title:"测试部",key:"0-0-1",isLeaf:!1,slots:{icon:"user"},scopedSlots:{title:"dropdown"}}]}],treeData2:[{title:"默认组织1111666888888888888",key:"0-0",isLeaf:!1,slots:{icon:"smile"},operates:[{title:"创建",click:function(t){e.handleCreat(t)}},{title:"删除",click:function(t){e.handleDelete(t)}}],children:[{title:"研发中心大树底1111111111111111111111111111111",key:"0-0-0",isLeaf:!0,slots:{icon:"user"},operates:[{title:"创建子节点2",click:function(t){e.handleCreat(t)}},{title:"删除子节点2",click:function(t){e.handleDelete(t)}}]},{title:"测试部",key:"0-0-1",isLeaf:!1,slots:{icon:"user"},scopedSlots:{title:"dropdown"}}]}]}},methods:{handleSelect:function(e,t){console.log(e,t,"选择了树节点")},onLoadData:function(e){var t=this;return new Promise((function(n){e.dataRef.children?n():setTimeout((function(){var a=[{title:"测试部1231",key:(new Date).getTime(),slots:{icon:"smile"},scopedSlots:{title:"dropdown"}}];t.$set(e.dataRef,"children",a),n()}),5e3)}))},handleCreat:function(e){console.log(e)}}}),y=h,f=Object(d["a"])(y,u,m,!1,null,null,null),k=f.exports,x=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("funTitleDetail",{attrs:{title:"树节点拖拽用法",detail:"将节点拖拽到其他节点内部或前后。"}}),n("com-show",[n("y-custom-tree",{attrs:{replaceFields:e.replaceFields,"default-expanded-keys":["0-0","0-0-0"],draggable:"",treeData:e.treeData},on:{dragenter:e.onDragEnter,drop:e.onDrop}})],1),n("pre",{staticClass:"line-numbers"},[e._v("      "),n("code",{staticClass:"language-html",domProps:{textContent:e._s(e.html)}},[e._v("\n      ")]),e._v("\n      "),n("code",{staticClass:"language-JavaScript"},[e._v("\n        export default {\n          data() {\n            return {\n              replaceFields: {\n                title: 'name',\n              },\n              treeData: [\n                {\n                  name: 'parent 1',\n                  key: '0-0',\n                  class: 'no-style', // 添加此类名，标题不会有任何样式\n                  children: [\n                    {\n                      name: 'parent 1-0',\n                      key: '0-0-0',\n                      disabled: true,\n                      children: [\n                        { name: 'leaf', key: '0-0-0-0', disableCheckbox: true },\n                        { name: 'leaf123', key: '0-0-0-1' },\n                      ],\n                    },\n                    {\n                      name: 'parent 1-1',\n                      key: '0-0-1',\n                      children: [{ key: '0-0-1-0', name: 'leaf1235' }],\n                    },\n                  ],\n                },\n              ],\n            };\n          },\n          methods: {\n            // 拖动时触发\n            onDragEnter(info) {\n              console.log(info);\n            },\n            // 拖动停止\n            onDrop(info) {\n              let children = 'children'; //对应 children，可根据情况修改\n              const dropKey = info.node.eventKey;\n              const dragKey = info.dragNode.eventKey;\n              const dropPos = info.node.pos.split('-');\n              const dropPosition = info.dropPosition - Number(dropPos[dropPos.length - 1]);\n              const loop = (data, key, callback) => {\n                data.forEach((item, index, arr) => {\n                  if (item.key === key) {\n                    return callback(item, index, arr);\n                  }\n                  if (item[children]) {\n                    return loop(item[children], key, callback);\n                  }\n                });\n              };\n              const data = [...this.treeData];\n\n              // Find dragObject\n              let dragObj;\n              loop(data, dragKey, (item, index, arr) => {\n                arr.splice(index, 1);\n                dragObj = item;\n              });\n              if (!info.dropToGap) {\n                // Drop on the content\n                loop(data, dropKey, item => {\n                  item[children] = item[children] || [];\n                  // where to insert 示例添加到尾部，可以是随意位置\n                  item[children].push(dragObj);\n                });\n              } else if (\n                (info.node[children] || []).length > 0 && // Has[children]\n                info.node.expanded && // Is expanded\n                dropPosition === 1 // On the bottom gap\n              ) {\n                loop(data, dropKey, item => {\n                  item[children] = item[children] || [];\n                  // where to insert 示例添加到尾部，可以是随意位置\n                  item[children].unshift(dragObj);\n                });\n              } else {\n                let ar;\n                let i;\n                loop(data, dropKey, (item, index, arr) => {\n                  ar = arr;\n                  i = index;\n                });\n                if (dropPosition === -1) {\n                  ar.splice(i, 0, dragObj);\n                } else {\n                  ar.splice(i + 1, 0, dragObj);\n                }\n              }\n              this.treeData = data;\n            },\n          },\n        };\n      ")]),e._v("\n  ")])],1)},b=[],g=n("2909"),D=(n("ac1f"),n("1276"),n("a9e3"),n("159b"),n("a434"),{name:"myTree3",data:function(){return{html:'<y-custom-tree\n        :replaceFields="replaceFields"\n        :default-expanded-keys="[\'0-0\', \'0-0-0\']"\n        @dragenter="onDragEnter"\n        @drop="onDrop"\n        draggable\n        :treeData="treeData"\n      >\n      </y-custom-tree>',replaceFields:{title:"name"},treeData:[{name:"parent 1",key:"0-0",class:"no-style",children:[{name:"parent 1-0",key:"0-0-0",disabled:!0,children:[{name:"leaf",key:"0-0-0-0",disableCheckbox:!0},{name:"leaf123",key:"0-0-0-1"}]},{name:"parent 1-1",key:"0-0-1",children:[{key:"0-0-1-0",name:"leaf1235"}]}]}]}},methods:{onDragEnter:function(e){console.log(e)},onDrop:function(e){var t,n="children",a=e.node.eventKey,l=e.dragNode.eventKey,s=e.node.pos.split("-"),o=e.dropPosition-Number(s[s.length-1]),i=function e(t,a,l){t.forEach((function(t,s,o){return t.key===a?l(t,s,o):t[n]?e(t[n],a,l):void 0}))},r=Object(g["a"])(this.treeData);if(i(r,l,(function(e,n,a){a.splice(n,1),t=e})),e.dropToGap)if((e.node[n]||[]).length>0&&e.node.expanded&&1===o)i(r,a,(function(e){e[n]=e[n]||[],e[n].unshift(t)}));else{var d,c;i(r,a,(function(e,t,n){d=n,c=t})),-1===o?d.splice(c,0,t):d.splice(c+1,0,t)}else i(r,a,(function(e){e[n]=e[n]||[],e[n].push(t)}));this.treeData=r}}}),v=D,C=Object(d["a"])(v,x,b,!1,null,null,null),S=C.exports,_=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("funTitleDetail",{attrs:{title:"选中互相没关系",detail:"checkStrictly 模式，选中节点与其它节点没有任何关系"}}),n("com-show",[n("y-custom-tree",{attrs:{checkable:"",checkStrictly:"",replaceFields:e.replaceFields,"default-expanded-keys":["0-0","0-0-0"],draggable:"",treeData:e.treeData}})],1),n("pre",{staticClass:"line-numbers"},[e._v("      "),n("code",{staticClass:"language-html",domProps:{textContent:e._s(e.html)}},[e._v("\n      ")]),e._v("\n      "),n("code",{staticClass:"language-JavaScript",domProps:{textContent:e._s(e.js)}},[e._v("\n      ")]),e._v("\n  ")]),n("funTitleDetail",{attrs:{title:"子选父",detail:"checkStrictly + strictCheckParent 模式，选中节点会自动选中以上关系的节点，但选父不会自动选以下关系节点"}}),n("com-show",[n("y-custom-tree",{attrs:{checkable:"",checkStrictly:"",strictCheckParent:"",replaceFields:e.replaceFields,"default-expanded-keys":["0-0","0-0-0"],draggable:"",treeData:e.treeData}})],1),n("pre",{staticClass:"line-numbers"},[e._v("      "),n("code",{staticClass:"language-html",domProps:{textContent:e._s(e.html)}},[e._v("\n      ")]),e._v("\n      "),n("code",{staticClass:"language-JavaScript",domProps:{textContent:e._s(e.js)}},[e._v("\n      ")]),e._v("\n  ")])],1)},w=[],T={name:"myTree4",data:function(){return{html:'<y-custom-tree\n        checkable\n        checkStrictly\n        :replaceFields="replaceFields"\n        :default-expanded-keys="[\'0-0\', \'0-0-0\']"\n        draggable\n        :treeData="treeData"\n      >',html2:'<y-custom-tree\n        checkable\n        checkStrictly\n        strictCheckParent\n        :replaceFields="replaceFields"\n        :default-expanded-keys="[\'0-0\', \'0-0-0\']"\n        draggable\n        :treeData="treeData"\n      >\n      </y-custom-tree>',js:" data() {\n                return {\n                    replaceFields: {\n                        title: 'name',\n                    },\n                    treeData: [\n                        {\n                        name: 'parent 1',\n                        key: '0-0',\n                        class: 'no-style', // 添加此类名，标题不会有任何样式\n                        children: [\n                            {\n                            name: 'parent 1-0',\n                            key: '0-0-0',\n                            children: [\n                                { name: 'leaf', key: '0-0-0-0' },\n                                { name: 'leaf123', key: '0-0-0-1' },\n                            ],\n                            },\n                            {\n                            name: 'parent 1-1',\n                            key: '0-0-1',\n                            children: [{ key: '0-0-1-0', name: 'leaf1235' }],\n                            },\n                        ],\n                    },\n                ],\n                };\n            },",replaceFields:{title:"name"},treeData:[{name:"parent 1",key:"0-0",checkable:!1,class:"no-style",children:[{name:"parent 1-0",key:"0-0-0",children:[{name:"leaf",key:"0-0-0-0"},{name:"leaf123",key:"0-0-0-1"}]},{name:"parent 1-1",key:"0-0-1",children:[{key:"0-0-1-0",name:"leaf1235"}]}]}]}}},L=T,P=Object(d["a"])(L,_,w,!1,null,null,null),O=P.exports,j=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("div",{staticStyle:{width:"300px"}},[n("h3",{staticClass:"fun-title"},[e._v("不带图标右键操作")]),n("com-show",[n("y-custom-tree",{attrs:{"default-expanded-keys":["0-0","0-0-0"],treeData:e.treeData,operates:e.commonOperates,operateTriggerMethod:["contextmenu"],noIconOperate:!0}},[n("a-icon",{staticStyle:{width:"16px",height:"16px"},attrs:{slot:"smile",type:"smile"},slot:"smile"}),n("a-icon",{staticStyle:{width:"16px",height:"16px"},attrs:{slot:"user",type:"user"},slot:"user"})],1)],1)],1),n("pre",{staticClass:"line-numbers"},[e._v("      "),n("code",{staticClass:"language-html",domProps:{textContent:e._s(e.html)}},[e._v("\n      ")]),e._v("\n      "),n("code",{staticClass:"language-JavaScript",domProps:{textContent:e._s(e.js)}},[e._v("\n      ")]),e._v("\n  ")])])},K=[],N={name:"myTree2",data:function(){var e=this;return{aa:["0-0-0"],html:'\n          <y-custom-tree\n              :default-expanded-keys="[\'0-0\', \'0-0-0\']"\n              :treeData="treeData"\n              :operates="commonOperates"\n              :operateTriggerMethod="[\'contextmenu\']"\n              :noIconOperate="true"\n            >\n              <a-icon slot="smile" type="smile" style="width:16px;height:16px" />\n              <a-icon slot="user" type="user" style="width:16px;height:16px" />\n            </y-custom-tree>\n          ',js:"\n          data() {\n        return {\n          commonOperates: [\n            {\n              title: '全局方法1',\n              click: i => {\n                this.handleCreat(i);\n              },\n            },\n            {\n              title: '全局方法2',\n              click: i => {\n                this.handleDelete(i);\n              },\n            },\n          ],\n          treeData: [\n            {\n              title: '默认组织1111666888888888888',\n              key: '0-0',\n              isLeaf: false,\n              slots: { icon: 'smile' },\n              scopedSlots: { title: 'dropdown' },\n              operates: [\n                {\n                  title: '创建数据',\n                  line: true,\n                  children: [\n                    {\n                      title: '子创建1',\n                      click: i => {\n                        this.handleCreat(i);\n                      },\n                      disabled: true,\n                    },\n                    {\n                      title: '子创建2',\n                      click: i => {\n                        this.handleCreat(i);\n                      },\n                    },\n                  ],\n                },\n                {\n                  title: '创建数据2',\n                  disabled: true,\n                  click: i => {\n                    this.handleDelete(i);\n                  },\n                },\n              ],\n              children: [\n                {\n                  title: '研发中心大树底1111111111111111111111111111111',\n                  key: '0-0-0',\n                  isLeaf: true,\n                  slots: { icon: 'user' },\n                  scopedSlots: { title: 'dropdown' },\n                  operates: [\n                    {\n                      title: '创建子节点2',\n                      click: i => {\n                        this.handleCreat(i);\n                      },\n                    },\n                    {\n                      title: '删除子节点2',\n                      click: i => {\n                        this.handleDelete(i);\n                      },\n                    },\n                  ],\n                },\n                { title: '测试部', key: '0-0-1', isLeaf: false, slots: { icon: 'user' }, scopedSlots: { title: 'dropdown' } },\n              ],\n            },\n          ]\n          },\n          methods: {\n        handleCreat(item) {\n          console.log(item);\n        },\n      },",commonOperates:[{title:"全局方法1",click:function(t){e.handleCreat(t)}},{title:"全局方法2",click:function(t){e.handleDelete(t)}}],treeData:[{title:"默认组织111166688888888888888888888888",key:"0-0",isLeaf:!1,slots:{icon:"smile"},scopedSlots:{title:"dropdown"},operates:[{title:"创建数据",line:!0,children:[{title:"子创建1",click:function(t){e.handleCreat(t)},disabled:!0},{title:"子创建2",click:function(t){e.handleCreat(t)}}]},{title:"创建数据2",disabled:!0,click:function(t){e.handleDelete(t)}}],children:[{title:"研发中心大树底1111111111111111111111111111111",key:"0-0-0",isLeaf:!0,slots:{icon:"user"},scopedSlots:{title:"dropdown"},operates:[{title:"创建子节点2",click:function(t){e.handleCreat(t)}},{title:"删除子节点2",click:function(t){e.handleDelete(t)}}]},{title:"测试部",key:"0-0-1",isLeaf:!1,slots:{icon:"user"},scopedSlots:{title:"dropdown"}}]}]}},methods:{handleCreat:function(e){console.log(e)}}},F=N,E=Object(d["a"])(F,j,K,!1,null,null,null),R=E.exports,J={name:"MyCustomTree",components:{tree1:p,tree2:k,tree3:S,tree4:O,tree5:R},data:function(){return{declareList:["任何需要通过层级组织的信息场景，如文件夹、组织架构、生物分类、国家地区等等。","Tree 子项中的可操作元素只能通过鼠标操作，不可聚焦，它们应该是表示性的，键盘不能操作到","默认节点高度为40px，如需要修改对应的高度可自行通过css穿透进行修改"],tableData:[{params:"noIconOperate",explain:"当设置右键操作时,设置为false则有有操作图标，为true则没有操作图标可直接右键触发",type:"Boolean",default:"false"},{params:"showTooltip",explain:"鼠标经过是否启用tooptip提示默认为true,设置为false则不生效",type:"Boolean",default:"true"},{params:"operatePlacement",explain:"菜单弹出位置：bottomLeft bottomCenter bottomRight topLeft topCenter topRight",type:"String",default:"bottomLeft"},{params:"nodeHeightSize",explain:"控制树的子节点高度默认为小写m字符串，目前仅支持两种高度格式分别为，s代表40px,m代表32px",type:"String",default:"'m'"},{params:"operates",explain:"传入弹出框的事件如新增删除等，在treeData节点传入该属性则会覆盖该属性，treeData节点没有传入则采用全局的，全局和treeData节点都不传入operates属性则隐藏弹出入口,可在回调函数里编写自己的逻辑,i参数为选中树节点的所有属性,",type:"Array",default:"{\n              title: '创建',\n              click: (i) => {\n                this.handleCreat(i);\n              },\n            },"},{params:"operateTriggerMethod",explain:"触发下拉的行为, 移动端不支持 hover,不传默认为点击触发",type:"Array<click|hover|contextmenu>",default:"['click']"},{params:"blockNode",explain:"是否节点占据一行",type:"boolean",default:"false"},{params:"treeData",explain:"treeNodes 数据，如果设置则不需要手动构造 TreeNode 节点（key 在整个树范围内唯一）",type:"array&lt;{key, title, children, [disabled, selectable]}&gt;",default:"--"},{params:"replaceFields",explain:"替换 treeNode 中 title,key,children 字段为 treeData 中对应的字段",type:"object",default:"{children:'children', title:'title', key:'key' }"},{params:"autoExpandParent",explain:"是否自动展开父节点",type:"boolean",default:"true"},{params:"checkable",explain:"节点前添加 Checkbox 复选框",type:"boolean",default:"false"},{params:"checkedKeys(v-model)",explain:"（受控）选中复选框的树节点（注意：父子节点有关联，如果传入父节点 key，则子节点自动选中；相应当子节点 key 都传入，父节点也自动选中。当设置<code>checkable</code>和<code>checkStrictly</code>，它是一个有<code>checked</code>和<code>halfChecked</code>属性的对象，并且父子节点的选中与否不再关联",type:"string[] | number[] | {checked: string[] | number[], halfChecked: string[] | number[]}",default:"[]"},{params:"checkStrictly",explain:"checkable 状态下节点选择完全受控（父子节点选中状态不再关联）",type:"boolean",default:"false"},{params:"strictCheckParent",explain:"选中节点会自动选中以上关系的节点，可配合 checkStrictly 一起使用",type:"boolean",default:"false"},{params:"defaultCheckedKeys",explain:"默认选中复选框的树节点",type:"string[] | number[]",default:"[]"},{params:"defaultExpandAll",explain:"默认展开所有树节点",type:"boolean",default:"false"},{params:"defaultExpandedKeys",explain:"默认展开指定的树节点",type:"string[] | number[]",default:"[]"},{params:"defaultExpandParent",explain:"默认展开父节点",type:"bool",default:"true"},{params:"defaultSelectedKeys",explain:"默认选中的树节点",type:"string[] | number[]",default:"[]"},{params:"disabled",explain:"将树禁用",type:"bool",default:"false"},{params:"draggable",explain:"设置节点可拖拽",type:"boolean",default:"false"},{params:"expandedKeys(.sync)",explain:"（受控）展开指定的树节点",type:"string[] | number[]",default:"[]"},{params:"filterTreeNode",explain:"按需筛选树节点（高亮），返回 true",type:"function(node)",default:"-"},{params:"loadData",explain:"异步加载数据",type:"function(node)",default:"-"},{params:"loadedKeys",explain:"（受控）已经加载的节点，需要配合 <code>loadData</code> 使用",type:"string[] | number[]",default:"[]"},{params:"multiple",explain:"支持点选多个节点（节点本身）",type:"boolean",default:"false"},{params:"selectable",explain:"是否可选中",type:"boolean",default:"true"},{params:"selectedKeys(.sync)",explain:"（受控）设置选中的树节点",type:"string[] | number[]",default:"-"},{params:"showIcon",explain:"是否展示 TreeNode title 前的图标，没有默认样式，如设置为 true，需要自行定义图标相关样式",type:"boolean",default:"false"},{params:"switcherIcon",explain:"自定义树节点的展开/折叠图标",type:"slot",default:"-"},{params:"showLine",explain:"是否展示连接线",type:"boolean",default:"false"},{params:"title",explain:"标题",type:"slot",default:""}],tableData2:[{params:"check",explain:"点击复选框触发",type:"function(checkedKeys, e:{checked: bool, checkedNodes, node, event})"},{params:"dragend",explain:"dragend 触发时调用",type:"function({event, node})"},{params:"dragenter",explain:"dragenter 触发时调用",type:"function({event, node, expandedKeys})"},{params:"dragleave",explain:"dragleave 触发时调用",type:"function({event, node})"},{params:"dragover",explain:"dragover 触发时调用",type:"function({event, node})"},{params:"dragstart",explain:"开始拖拽时调用",type:"function({event, node})"},{params:"drop",explain:"drop 触发时调用",type:"function({event, node, dragNode, dragNodesKeys})"},{params:"expand",explain:"展开/收起节点时触发",type:"function(expandedKeys, {expanded: bool, node})"},{params:"load",explain:"节点加载完毕时触发",type:"function(loadedKeys, {event, node})"},{params:"rightClick",explain:"响应右键点击",type:"function({event, node})"},{params:"select",explain:"点击树节点触发",type:"function(selectedKeys, e:{selected: bool, selectedNodes, node, event})"}],tableData3:[{params:"class",explain:"节点的 class",type:"string",default:"-"},{params:"operateHidden",explain:"是否隐藏操作",type:"boolean",default:"false"},{params:"style",explain:"节点的 style",type:"string|object",default:"-"},{params:"checkable",explain:"当树为 checkable 时，设置独立节点是否展示 Checkbox",type:"boolean",default:"-"},{params:"disableCheckbox",explain:"禁掉 checkbox",type:"boolean",default:"false"},{params:"disabled",explain:"禁掉响应",type:"boolean",default:"false"},{params:"icon",explain:"自定义图标。可接收组件，props 为当前节点 props",type:"slot|slot-scope",default:"-"},{params:"isLeaf",explain:"设置为叶子节点(设置了<code>loadData</code>时有效)",type:"boolean",default:"false"},{params:"key",explain:"被树的 (default)ExpandedKeys / (default)CheckedKeys / (default)SelectedKeys 属性所用。注意：整个树范围内的所有节点的 key 值不能重复！",type:"string | number",default:"内部计算出的节点位置"},{params:"selectable",explain:"设置节点是否可被选中",type:"boolean",default:"true"},{params:"title",explain:"标题",type:"string|slot|slot-scope",default:"'---'"},{params:"slots",explain:"使用 treeNodes 时，可以通过该属性配置支持 slot 的属性，如 <code>slots: { title: 'XXX'}</code>",type:"object",default:"-"},{params:"scopedSlots",explain:"使用 columns 时，可以通过该属性配置支持 slot-scope 的属性，如 <code>scopedSlots: { title: 'XXX'}</code>",type:"object",default:"-"},{params:"on",explain:"事件对象，仅在 treeNodes 使用方式中生效，如<code>{click: () =&gt; {}}</code>",type:"object",default:"'---'"}],tableData4:[{params:"expandAction",explain:"目录展开逻辑，可选 false 'click' 'dblclick'\t",type:"string",default:"'click"}],tableData5:[{params:"slots",explain:"可以通过slots自定义图标，每个节点的slot属性名字对应的插槽名字一致则渲染对应的内容",type:"-",default:"-"},{params:"scopedSlots",explain:"可以通过slots自定义图标，每个节点的slot属性名字对应的插槽名字一致则渲染对应的内容scopedSlots和slots区别可以通过scopedSlots可以传递参数",type:"-",default:"-"}]}},methods:{handleDelete:function(e){console.log("点击了删除",e)},handleCreat:function(e){console.log("点击了创建",e)}}},$=J,A=Object(d["a"])($,a,l,!1,null,null,null);t["default"]=A.exports}}]);
//# sourceMappingURL=treeCustom.363c57b5.js.map